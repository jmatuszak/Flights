{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet RegisterPassengerComponent = class RegisterPassengerComponent {\n  constructor(passengerService, fb, authService, router) {\n    this.passengerService = passengerService;\n    this.fb = fb;\n    this.authService = authService;\n    this.router = router;\n    this.form = this.fb.group({\n      email: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(3), Validators.maxLength(100)])],\n      firstName: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(2), Validators.maxLength(35)])],\n      lastName: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(2), Validators.maxLength(35)])],\n      isFemale: [true, Validators.required]\n    });\n    this.login = () => {\n      this.authService.loginUser({\n        email: this.form.get('email')?.value\n      });\n      this.router.navigate(['/search-flights']);\n    };\n  }\n  ngOnInit() {}\n  checkPassenger() {\n    var params = {\n      email: this.form.get('email')?.value\n    };\n    this.passengerService.findPassenger(params).subscribe(this.login, e => {\n      if (e.status != 404) console.error(e);\n    });\n  }\n  register() {\n    if (this.form.invalid) return;\n    console.log(\"Form Values: \", this.form.value);\n    this.passengerService.registerPassenger({\n      body: this.form.value\n    }).subscribe(this.login, console.error);\n  }\n};\nRegisterPassengerComponent = __decorate([Component({\n  selector: 'app-register-passenger',\n  templateUrl: './register-passenger.component.html',\n  styleUrls: ['./register-passenger.component.css']\n})], RegisterPassengerComponent);\nexport { RegisterPassengerComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAAsBC,UAAU,QAAO,gBAAgB;AAQhD,IAAMC,0BAA0B,GAAhC,MAAMA,0BAA0B;EAErCC,YAAoBC,gBAAkC,EAC5CC,EAAe,EACfC,WAAwB,EACxBC,MAAc;IAHJ,qBAAgB,GAAhBH,gBAAgB;IAC1B,OAAE,GAAFC,EAAE;IACF,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IAGhB,SAAI,GAAG,IAAI,CAACF,EAAE,CAACG,KAAK,CAAC;MACnBC,KAAK,EAAE,CAAC,EAAE,EAAER,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC5HC,SAAS,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC/HE,QAAQ,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACS,OAAO,CAAC,CAACT,UAAU,CAACU,QAAQ,EAAEV,UAAU,CAACQ,KAAK,EAAER,UAAU,CAACW,SAAS,CAAC,CAAC,CAAC,EAAEX,UAAU,CAACY,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC9HG,QAAQ,EAAE,CAAC,IAAI,EAAEf,UAAU,CAACU,QAAQ;KACrC,CAAC;IA4BM,UAAK,GAAG,MAAM;MACpB,IAAI,CAACL,WAAW,CAACW,SAAS,CAAC;QAAER,KAAK,EAAE,IAAI,CAACS,IAAI,CAACC,GAAG,CAAC,OAAO,CAAC,EAAEC;MAAK,CAAE,CAAC;MACpE,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,iBAAiB,CAAC,CAAC;IAC3C,CAAC;EAtCG;EASJC,QAAQ,IAER;EAEAC,cAAc;IACZ,IAAIC,MAAM,GAAG;MAAEf,KAAK,EAAE,IAAI,CAACS,IAAI,CAACC,GAAG,CAAC,OAAO,CAAC,EAAEC;IAAM,CAAE;IAEtD,IAAI,CAAChB,gBAAgB,CAClBqB,aAAa,CAACD,MAAM,CAAC,CACrBE,SAAS,CAAC,IAAI,CAACC,KAAK,EAAEC,CAAC,IAAG;MACzB,IAAGA,CAAC,CAACC,MAAM,IAAI,GAAG,EAClBC,OAAO,CAACC,KAAK,CAACH,CAAC,CAAC;IAClB,CAAC,CAAC;EACN;EAEAI,QAAQ;IAEN,IAAI,IAAI,CAACd,IAAI,CAACe,OAAO,EACnB;IAEFH,OAAO,CAACI,GAAG,CAAC,eAAe,EAAE,IAAI,CAAChB,IAAI,CAACE,KAAK,CAAC;IAE7C,IAAI,CAAChB,gBAAgB,CAAC+B,iBAAiB,CAAC;MAAEC,IAAI,EAAE,IAAI,CAAClB,IAAI,CAACE;IAAK,CAAE,CAAC,CAC/DM,SAAS,CAAC,IAAI,CAACC,KAAK,EAAEG,OAAO,CAACC,KAAK,CAAE;EAC1C;CAOD;AA9CY7B,0BAA0B,eALtCF,SAAS,CAAC;EACTqC,QAAQ,EAAE,wBAAwB;EAClCC,WAAW,EAAE,qCAAqC;EAClDC,SAAS,EAAE,CAAC,oCAAoC;CACjD,CAAC,GACWrC,0BAA0B,CA8CtC;SA9CYA,0BAA0B","names":["Component","Validators","RegisterPassengerComponent","constructor","passengerService","fb","authService","router","group","email","compose","required","minLength","maxLength","firstName","lastName","isFemale","loginUser","form","get","value","navigate","ngOnInit","checkPassenger","params","findPassenger","subscribe","login","e","status","console","error","register","invalid","log","registerPassenger","body","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Jan\\source\\repos\\Flights\\ClientApp\\src\\app\\register-passenger\\register-passenger.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PassengerService } from './../api/services/passenger.service';\nimport { FormBuilder, Validators} from '@angular/forms';\nimport { AuthService } from '../auth/auth.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-register-passenger',\n  templateUrl: './register-passenger.component.html',\n  styleUrls: ['./register-passenger.component.css']\n})\nexport class RegisterPassengerComponent implements OnInit {\n\n  constructor(private passengerService: PassengerService,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  form = this.fb.group({\n    email: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(3), Validators.maxLength(100)])],\r\n    firstName: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(2), Validators.maxLength(35)])],\r\n    lastName: ['', Validators.compose([Validators.required, Validators.email, Validators.minLength(2), Validators.maxLength(35)])],\r\n    isFemale: [true, Validators.required]\r\n  })\n\n  ngOnInit(): void {\n\r\n  }\n\n  checkPassenger(): void {\n    var params = { email: this.form.get('email')?.value! }\r\n\r\n    this.passengerService\r\n      .findPassenger(params)\r\n      .subscribe(this.login, e => {\r\n        if(e.status != 404)\r\n        console.error(e)\r\n      })\r\n  }\n\n  register() {\n\n    if (this.form.invalid)\n      return;\n\n    console.log(\"Form Values: \", this.form.value);\n\n    this.passengerService.registerPassenger({ body: this.form.value })\r\n      .subscribe(this.login, console.error )\r\n  }\n\n  private login = ()  => {\n    this.authService.loginUser({ email: this.form.get('email')?.value })\r\n    this.router.navigate(['/search-flights'])\r\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}