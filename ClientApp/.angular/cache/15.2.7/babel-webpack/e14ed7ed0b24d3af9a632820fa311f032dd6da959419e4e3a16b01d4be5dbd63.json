{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { findFlight } from '../fn/flight/find-flight';\nimport { searchFlight } from '../fn/flight/search-flight';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class FlightService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight$Response(params, context) {\n    return searchFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchFlight(params, context) {\n    return this.searchFlight$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findFlight()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight$Response(params, context) {\n    return findFlight(this.http, this.rootUrl, params, context);\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findFlight(params, context) {\n    return this.findFlight$Response(params, context).pipe(map(r => r.body));\n  }\n}\nFlightService.SearchFlightPath = '/Flight';\nFlightService.FindFlightPath = '/Flight/{id}';\nFlightService.ɵfac = function FlightService_Factory(t) {\n  return new (t || FlightService)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\nFlightService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlightService,\n  factory: FlightService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAKA,SAASA,GAAG,QAAQ,gBAAgB;AAEpC,SAASC,WAAW,QAAQ,iBAAiB;AAI7C,SAASC,UAAU,QAAQ,0BAA0B;AAErD,SAASC,YAAY,QAAQ,4BAA4B;;;;AAIzD,OAAM,MAAOC,aAAc,SAAQH,WAAW;EAC5CI,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,qBAAqB,CAACC,MAA4B,EAAEC,OAAqB;IACvE,OAAOP,YAAY,CAAC,IAAI,CAACI,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC/D;EAEA;;;;;;EAMAP,YAAY,CAACM,MAA4B,EAAEC,OAAqB;IAC9D,OAAO,IAAI,CAACF,qBAAqB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACrDZ,GAAG,CAAEa,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;EAEA;;EAGA;;;;;;EAMAC,mBAAmB,CAACN,MAAyB,EAAEC,OAAqB;IAClE,OAAOR,UAAU,CAAC,IAAI,CAACK,IAAI,EAAE,IAAI,CAACI,OAAO,EAAEF,MAAM,EAAEC,OAAO,CAAC;EAC7D;EAEA;;;;;;EAMAR,UAAU,CAACO,MAAyB,EAAEC,OAAqB;IACzD,OAAO,IAAI,CAACK,mBAAmB,CAACN,MAAM,EAAEC,OAAO,CAAC,CAACE,IAAI,CACnDZ,GAAG,CAAEa,CAA2B,IAAWA,CAAC,CAACC,IAAI,CAAC,CACnD;EACH;;AArDWV,aAAc,CAMTY,gBAAgB,GAAG,SAAS;AANjCZ,aAAc,CA+BTa,cAAc,GAAG,cAAc;AA/BpCb,aAAc;mBAAdA,aAAa;AAAA;AAAbA,aAAc;SAAdA,aAAa;EAAAc,SAAbd,aAAa;EAAAe,YADA;AAAM","names":["map","BaseService","findFlight","searchFlight","FlightService","constructor","config","http","searchFlight$Response","params","context","rootUrl","pipe","r","body","findFlight$Response","SearchFlightPath","FindFlightPath","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Jan\\source\\repos\\Flights\\ClientApp\\src\\app\\api\\services\\flight.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\n\r\nimport { findFlight } from '../fn/flight/find-flight';\r\nimport { FindFlight$Params } from '../fn/flight/find-flight';\r\nimport { searchFlight } from '../fn/flight/search-flight';\r\nimport { SearchFlight$Params } from '../fn/flight/search-flight';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FlightService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchFlight()` */\r\n  static readonly SearchFlightPath = '/Flight';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight$Response(params?: SearchFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return searchFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchFlight(params?: SearchFlight$Params, context?: HttpContext): Observable<void> {\r\n    return this.searchFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findFlight()` */\r\n  static readonly FindFlightPath = '/Flight/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findFlight()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight$Response(params: FindFlight$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {\r\n    return findFlight(this.http, this.rootUrl, params, context);\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findFlight$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findFlight(params: FindFlight$Params, context?: HttpContext): Observable<void> {\r\n    return this.findFlight$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}